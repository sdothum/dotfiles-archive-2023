#!/usr/bin/dash
# sdothum - 2016 (c) wtfpl
# [ $TRACE ] && CHILD="toggle $@" . $PARENT

# herbstluftwm
# ══════════════════════════════════════════════════════════════════════════════

# ............................................................ Toggle operations

# Usage: toggle <msg> [<option>]*, start/stop visible app or raise app to current desktop
#        toggle term <msg>, start/stop visible terminal app or goto terminal desktop (tag)

# refresh in panel title to update frame status, see draw panel
touch_panel() { xtitle -f 'X%s' >$(cat $PANEL_FIFO); }

# ......................................................... Context applications

# close by winid
close() {
  tag=$(herbstclient attr clients.$1.tag)
  # kill instance if already visible
  [ $tag != "$(query tag)" ] && [ $tag != "$(query tag inactive)" ] && return 1
  herbstclient close $1
  # clear panel title as required
  focus window
  return 0
}

# special term processing toggles on unique title
toggle_term() {
  if xdotool search --limit 1 --classname "$1" >/dev/null ;then
    winid=$(query instance $1)
    if [ $winid ] ;then
      if ! close $winid ;then
        # goto desktop (unhide)
        herbstclient use ${tag#\'}
        [ -e $DYNAMIC ] && focus frame
        herbstclient bring $winid
      fi
    fi
  else
    # see term (urxvt)
    $msg $@
  fi
}

# toggle application, note application specific exception handling
toggle_app() {
  # handle rox filer binary name
  case $msg in
  rox   ) app=ROX-Filer       ;;
  esac
  if pgrep -lf ${app:-$msg} | grep -qv toggle ;then
    case $msg in
    xpad    ) xpad --quit;      exit ;;  # xpad multiple windows shortcut
    decorate) killall decorate; exit ;;
    rox     ) killall $app;     exit ;;  # close method can hang dmenu
    esac
    app=${app:-$msg}
    lock
    focus=true
    winids=$(query instance $app)
    [ "$winids" ] || winids=$(query title $app)
    if [ "$winids" ] ;then
      for i in $winids ;do
        if ! close $i ;then
          # stack windows
          [ $focus ] && { focus frame; unset focus; }
          herbstclient bring $i
        fi
      done
    else
      focus $msg $@
    fi
    unlock
  else
    focus $msg $@
  fi
}

# ....................................................................... Toggle

msg=$1
[ $msg ] && shift || usage $0
if [ -e ${0%/toggle}/functions/toggle/$msg ] ;then
  . ${0%/toggle}/functions/toggle/$msg $@
elif [ $msg = term ] ;then
  toggle_term $@
elif which $msg >/dev/null 2>&1 ;then
  toggle_app $@
else
  usage $0
fi
herbstclient emit_hook focus_changed

# vim: set ft=sh: #
