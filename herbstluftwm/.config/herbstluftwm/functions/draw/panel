# sdothum - 2016 (c) wtfpl
[ $TRACE ] && CHILD="draw/panel $@" . $PARENT

# herbstluftwm
# ══════════════════════════════════════════════════════════════════════════════

# ................................................................... Draw panel

# Usage: draw panel <fifo>, see restore panel

[ -e $SPANEL ] || exit  # no panel
which lemonbar >/dev/null 2>&1 || exit
fifo=${1#:}
[ $fifo ] || fifo=$(herbstclient attr monitors.focus.index)
pstat "^lemonbar -d -n lemonbar:$fifo " && exit

# .................................................................. Panel theme

# to set panel location to bottom of screen, export in .xinitrc
[ $PANEL_BOTTOM ] && PANEL_BOTTOM=-b

# panel font
# PANEL_FONT='Iosevka\-mono'  # lemonbar requires the dash be escaped
PANEL_FONT=$MONOFONT
PANEL_UNDERLINE=2

# tic indicator: none (unset), dot, circle, square, bar, tape, seconds
[ -e $TICKER ] && { TIC=$(cat $TICKER); TIC=${TIC:-tape}; }

# panel symbols (tag numbers option dropped to simplify colour assignments)
OCCUPIED='■'
FREE='□'
TAG_PAD='    '          # tag bar separator (visual spacing)
STATPAD=${TAG_PAD% }

# panel theme
DEFAULT_BG='#00000000'  # alpha channel for panel transparency with compton
DEFAULT_FG="#$(conky color PANEL)"
ACTIVE_FG="#$(conky color LUARINGS)"
INACTIVE_FG="#$(conky color colorA)"
FREE_FG="#$(conky color default_color)"
OCCUPIED_FG=$FREE_FG

[ -e $PMARGIN ] && margin=$(cat $PMARGIN) || return  # wait for draw monitor to complete, initialize in autostart
[ -s $PANEL_HEIGHT ] && PANEL_HEIGHT=$(cat $PANEL_HEIGHT) || PANEL_HEIGHT=$(query pheight)

# ..................................................................... Geometry

# calculate panel width (don't span monitors)
monitor=$(herbstclient attr monitors.focus.index)

# geometry has the format: X Y W H
geometry='X:Y:W:H'
for i in $(herbstclient monitor_rect $monitor) ;do
  eval monitor${geometry%%:*}=$i
  geometry=${geometry#*:}
done

mid_point=$(( $monitorW / ($(fontsize) - 3) / 2 ))  # kludgey column width calculation for title trim below

# frame=$(herbstclient attr settings.frame_gap)
# window=$(herbstclient attr settings.window_gap)
# border=$(herbstclient attr theme.border_width)

# compositing shadow tweaking probably only works for flat looks, consider a panel height factor otherwise
[ $PANEL_HEIGHT -lt $margin ] && PANEL_HEIGHT=$margin
[ $PANEL_BOTTOM ] && panel_offsetY=$(( $(query displayheight) - $PANEL_HEIGHT )) || panel_offsetY=$PANEL_HEIGHT

[ -s $PANEL_INDENT ] && indent=$(cat $PANEL_INDENT) || indent=$(( $margin * 2 ))
[ $indent -lt $margin ] && indent=$margin
panel_width=$(( $monitorW - $indent * 2 ))
panel_offsetX=$(( $monitorX + $indent ))

# # deprecated with primary:secondary as left:right..
# # multihead geometry for secondary primary (left right) orientation
# if is multihead ;then
#   if is primary ;then
#     secondaryX=$(query display secondary | awk '{ print $1 }')
#     panel_offsetX=$(( $panel_offsetX - $secondaryX ))
#   fi
# fi

# ................................................................... Tag status

desktops() {
  active=$(query tag)
  inactive=$(query tag inactive)
  unset tags
  for i in $(query winids) ;do tags="$tags $(herbstclient attr $i.tag)" ;done
  unset desktops
  for i in $TAGS ;do
    format="%{B$DEFAULT_BG}"
    if echo $tags | grep -q $i ;then
      echo $tags | egrep -q "^$i| $i" && visible=true || unset visible
      echo $tags | grep -q "'$i" && hidden=true || unset hidden
      [ $visible ] && tag=$OCCUPIED || tag=$FREE
      if [ $i = "$active" ] ;then
        [ $visible ] && format="${format}%{F$ACTIVE_FG}"
        [ $hidden  ] && format="${format}%{F$ACTIVE_FG}%{U$ACTIVE_FG}%{+u}"
      elif [ $i = "$inactive" ] ;then
        [ $visible ] && format="${format}%{F$INACTIVE_FG}"
        [ $hidden  ] && format="${format}%{F$INACTIVE_FG}%{U$INACTIVE_FG}%{+u}"
      else
        [ $visible ] && format="${format}%{F$OCCUPIED_FG}"
        [ $hidden  ] && format="${format}%{F$OCCUPIED_FG}%{U$OCCUPIED_FG}%{+u}"
      fi
    else
      unset visible
      unset hidden
      tag=$FREE
      if [ $i = "$active" ] ;then
        format="${format}%{F$ACTIVE_FG}"
      elif [ $i = "$inactive" ] ;then
        format="${format}%{F$INACTIVE_FG}"
      else
        format="${format}%{F$FREE_FG}"
      fi
    fi
    desktops="${desktops}${TAG_PAD}${format}${tag}%{-u}%{U-}%{B-}%{F-}"
  done
  [ -e $STAT ] || desktops="${desktops}$TAG_PAD"  # center tags with triple padding, see $stat
}

# .................................................................... Cpu stats

cpu_stat() { stat="${STATPAD}${STATPAD}$cpu_usage${STATPAD}$cpu_temp${STATPAD}$mem_usage${DESKPAD}${TAG_PAD}"; }

# ............................................................... Current window

# tag desktop description
title() {
  tag=$(herbstclient attr monitors.focus.tag)
  title=$(query tname $tag)
}

# desktop details
active_window() {
  title
  count=$(herbstclient attr tags.focus.client_count)
  tickcount=$(herbstclient attr "tags.by-name.'$tag.client_count" 2>/dev/null)
  [ $tickcount ] || tickcount=0
  if [ $count -gt 1 ] || [ $tickcount -gt 0 ] ;then
    if [ $count -gt 1 ] && [ $tickcount -gt 0 ] ;then
      title="${title}${LSEP}${count}${LSEP}%{U$DEFAULT_FG}%{+u}${tickcount}%{-u}%{U-}"
    elif [ ${count} -gt 1 ] ;then
      title="${title}${LSEP}${count}"
    else
      title="${title}${LSEP}%{U$DEFAULT_FG}%{+u}${tickcount}%{-u}%{U-}"
    fi
  fi
  unset hiding
  if is fullscreen ;then
    [ $count -gt 1 ] && hiding=true
  elif herbstclient compare tags.by-name.$tag.curframe_wcount gt 1 ;then
    is layout max && hiding=true
  fi
  if [ $count -gt 0 ] ;then
    if [ "$(query wname)" = "${line#?}" ] ;then
      if [ $hiding ] ;then
        title="${title}${LSEP}%{B$DEFAULT_BG}%{F$ACTIVE_FG}%{U$ACTIVE_FG}%{+u}${line#?}%{-u}%{U-}%{F-}%{B-}%{F$DEFAULT_FG}"
      else
        title="${title}${LSEP}%{B$DEFAULT_BG}%{F$ACTIVE_FG}${line#?}%{F-}%{B-}%{F$DEFAULT_FG}"
      fi
    else
      if [ $hiding ] ;then
        title="${title}${LSEP}%{B$DEFAULT_BG}%{F$ACTIVE_FG}%{U$ACTIVE_FG}%{+u}$(query wname)%{-u}%{U-}%{F$DEFAULT_FG}"
      else
        title="${title}${LSEP}%{B$DEFAULT_BG}%{F$ACTIVE_FG}$(query wname)%{F$DEFAULT_FG}"
      fi
      desc=$(asciititle ${line#?})
      [ "$desc" ] && title="${title}${LSEP}${desc}%{B-}%{F-}"
    fi
  fi
}

# ....................................................................... Clocks

dot()     { [ "$tic" = '●' ] && tic='○' || tic='●'; }
seconds() { tic=${line#*| }; tic=${tic%|*}; }

circle() {
  [ "$tic" = '◓' ] && tic='◑' ||
  { [ "$tic" = '◑' ] && tic='◒' ||
    { [ "$tic" = '◒' ] && tic='◐' || tic='◓'; };}
}

square() {
  [ "$tic" = '⬒' ] && tic='⬔' ||
  { [ "$tic" = '⬔' ] && tic='◨' ||
    { [ "$tic" = '◨' ] && tic='◪' ||
      { [ "$tic" = '◪' ] && tic='⬓' ||
        { [ "$tic" = '⬓' ] && tic='⬕' ||
          { [ "$tic" = '⬕' ] && tic='◧' ||
            { [ "$tic" = '◧' ] && tic='◩' || tic='⬒'; };};};};};}
}

bar() {
  tic=${line#*|}
  tic=${tic%|*}
  case $tic in
  00      ) tic=' ' ;;
  0[2468] ) tic="%{F$DEFAULT_FG}▁%{F-}" ;;
  0[13579]) tic="%{F$DEFAULT_FG}▂%{F-}" ;;
  10      ) tic="%{F$DEFAULT_FG}▁%{F-}" ;;
  1[2468] ) tic="%{F$DEFAULT_FG}▂%{F-}" ;;
  1[13579]) tic="%{F$DEFAULT_FG}▃%{F-}" ;;
  20      ) tic="%{F$DEFAULT_FG}▂%{F-}" ;;
  2[2468] ) tic="%{F$DEFAULT_FG}▃%{F-}" ;;
  2[13579]) tic="%{F$DEFAULT_FG}▄%{F-}" ;;
  30      ) tic="%{F$DEFAULT_FG}▃%{F-}" ;;
  3[2468] ) tic="%{F$DEFAULT_FG}▄%{F-}" ;;
  3[13579]) tic="%{F$DEFAULT_FG}▅%{F-}" ;;
  40      ) tic="%{F$DEFAULT_FG}▄%{F-}" ;;
  4[2468] ) tic="%{F$DEFAULT_FG}▅%{F-}" ;;
  4[13579]) tic="%{F$DEFAULT_FG}▆%{F-}" ;;
  50      ) tic="%{F$DEFAULT_FG}│%{F-}" ;;
  51      ) tic="%{F$DEFAULT_FG}┃%{F-}" ;;
  52      ) tic="%{F$DEFAULT_FG}█%{F-}" ;;
  53      ) tic="%{F$DEFAULT_FG}▇%{F-}" ;;
  54      ) tic="%{F$DEFAULT_FG}▆%{F-}" ;;
  55      ) tic="%{F$DEFAULT_FG}▅%{F-}" ;;
  56      ) tic="%{F$DEFAULT_FG}▄%{F-}" ;;
  57      ) tic="%{F$DEFAULT_FG}▃%{F-}" ;;
  58      ) tic="%{F$DEFAULT_FG}▂%{F-}" ;;
  59      ) tic="%{F$DEFAULT_FG}▁%{F-}" ;;
  esac
}

tape() {
  tic=${line#*|}
  tic=${tic%|*}
  if [ ${tic%%:*} -lt 10 ] ;then
    # hours 0 - 9, cycle aligns on ten second intervals
    len=11
    pos=${tic##*:}
    # pos=$(( ${pos%??} % 10 ))  # crashes in dash (memory leak on arm?)
    pos=$(echo "${pos%??} % 10" | bc)
    [ $pos = 0 ] && pos=10
  else
    # hours 10 - 12, format string continously cycles
    len=12
    pos=$(( ${pos:-0} + 1 ))
    [ $pos -gt 10 ] && pos=0
  fi
  tic="$(echo "$tic" | tail -c $(( $len - $pos )))$(echo "$tic" | head -c $pos)"
}

# ................................................................ Weather watch

weather() { unset update_weather; conky weather panel >$WEATHER & }

# .................................................................. System info

# initialize (for overlay redraw), see draw root
[ -e $WEATHER ] && { [ -s $WEATHER ] && current_weather=$(cat $WEATHER); weather; }

touch $STAT:cpu $STAT:temp $STAT:mem
cpu_usage=$(cat $STAT:cpu)  # to avoid line centering shift
cpu_temp=$(cat $STAT:temp)
mem_usage=$(cat $STAT:mem)

currently() {
  unset clock
  if [ $TIC ] ;then
    case $TIC in
    b* ) bar ;;
    c* ) circle ;;
    d* ) dot ;;
    sq*) square ;;
    s* ) seconds ;;
    t* ) tape ;;
    esac
    ticker="%{F$DEFAULT_FG}$tic%{F-}"
    case $TIC in
    se*) clock="$ticker" ;;
    t* ) clock="$ticker" ;;
    *  ) clock="  $ticker" ;;
    esac
  fi

  # refresh weather every 10 minutes
  if [ -e $WEATHER ] ;then
    minute=${line#*:?}    # hh:mm:ss.* -> m:ss.*
    case ${minute%:*} in  #            -> m
    0) [ $update_weather ] && weather ;;
    *) update_weather=true ;;
    esac
  fi
  [ -s $WEATHER ] && [ "$(cat $WEATHER)" != '' ] && current_weather=$(cat $WEATHER)  # prevent blanking during update, see weather()
  line="${line%%^*}${current_weather}${line#*^}"

  line="${line%%|*}${clock}%{F-}${line##*|}"
  system="%{F$DEFAULT_FG}%{B$DEFAULT_BG}${line#?}%{B-}%{F-}"
}

# ............................................................... FIFO read loop

panel() {
  while read -r line ;do
    case $line in
    S*       ) currently                     ;;  # clock based info
    X*       ) active_window; desktops       ;;
    C*       ) [ "${line#?}" = '  0%' ] || cpu_usage=${line#?}; cpu_stat ;;  # ignore 0%
    T*       ) cpu_temp=${line#?};  cpu_stat ;;
    # M*     ) mem_usage=$(echo ${line#?} | sed 's/..M/M/'); cpu_stat ;;
    # M*     ) mem_usage=$(echo ${line#?} | sed 's/..M/ᴹ/; s/G/ᴳ/'); cpu_stat ;;
    M*       ) mem_usage=$(echo ${line#?} | sed 's/..M/⠍/; s/G/⠛/'); cpu_stat ;;
    !*       ) echo "$cpu_usage" >$STAT:cpu; echo "$cpu_temp" >$STAT:temp; echo "$mem_usage" >$STAT:mem ;;  # save stats for draw root redraw
    *_changed) desktops ;;
    esac
    
    [ $MUSL ] && { line=$(xtitle -f 'X%s'); active_window; desktops; }  # see below

    # empty desktop does not generate T message
    [ "$title"    ] || title
    [ "$desktops" ] || desktops
    # restrict title to left hand side of panel
    chop=$(( $mid_point + $(echo "$title"| wc -c) - $(echo "$title" | sed 's/%[{][^}]*[}]//g' | wc -c) ))
    title=$(echo "$title" | cut -b -$chop)
    printf "%s\n" "%{l}${title}%{c}${desktops}${stat}%{r}${system}"
    unset line
  done
}

# ......................................................................... FIFO

# void musl currently has a mkfifo bug that limits the buffer to the last feed, see panel() for adjustment
musl && MUSL=true || GLIBC=true

# initialize fifo
[ -e $PANEL_FIFO:$fifo ] && rm -f $PANEL_FIFO:$fifo
mkfifo $PANEL_FIFO:$fifo
echo $PANEL_FIFO:$fifo >$PANEL_FIFO

# note physical linebreaks for each format specification (to accomodate slow processors, notably arm)
case $TIC in
se*) clock -i 1 -sf "S^${RSEP}%{F$ACTIVE_FG}| %-I:%M %S%P|%{F-}${RSEP}%a %-d %b '%y" >$PANEL_FIFO:$fifo & ;;
t* ) clock -i 1 -sf "S^${RSEP}%{F$ACTIVE_FG}| %-I:%M:%S%P|%{F-}${RSEP}%a %-d %b '%y" >$PANEL_FIFO:$fifo & ;;
*  ) clock -i 1 -sf "S^${RSEP}%{F$ACTIVE_FG}%-I:%M%{F-} %P|%S|${RSEP}%a %-d %b '%y"  >$PANEL_FIFO:$fifo & ;;
esac

# event driven panel update
if [ $GLIBC ] ;then
  herbstclient --idle '.*_changed' >$PANEL_FIFO:$fifo &
  xtitle -sf 'X%s\n' >$PANEL_FIFO:$fifo 2>/dev/null &  # see emit_hook
  draw spine &  # non-panel related redundancy check for latent frame handling, see emit_hook
fi

# cpu usage, cpu temperature, memory usage stats
if [ -e $STAT ] ;then
  while : ;do sar -u --dec=0 1 1 | tail -1 | awk '{ printf "C%3d%%\n", $3 }' > $PANEL_FIFO:$fifo; done &  # cycle >~ 1 second
  while : ;do echo "T$(cpu_temp)°" > $PANEL_FIFO:$fifo; sleep 2; done &
  # while : ;do free -h | grep 'Mem:' | sed -r 's/^[^ ]* *[^ ]* *([0-9.]*)Mi.*/\1M/; s/^[^ ]* *[^ ]* *([0-9.]*)Gi.*/\1G/; s/^/M/' > $PANEL_FIFO:$fifo; sleep 3; done &
  # while : ;do free -h | grep 'Mem:' | sed -r 's/^[^ ]* *[^ ]* *([0-9.]*)Mi.*/\1ᴹ/; s/^[^ ]* *[^ ]* *([0-9.]*)Gi.*/\1ᴳ/; s/^/M/' > $PANEL_FIFO:$fifo; sleep 3; done &
  while : ;do free -h | grep 'Mem:' | sed -r 's/^[^ ]* *[^ ]* *([0-9.]*)Mi.*/\1⠍/; s/^[^ ]* *[^ ]* *([0-9.]*)Gi.*/\1⠛/; s/^/M/' > $PANEL_FIFO:$fifo; sleep 3; done &
fi

cat $PANEL_FIFO:$fifo | panel | lemonbar -d -n "lemonbar:$fifo" \
                                         -g ${panel_width}x$PANEL_HEIGHT+$panel_offsetX+$panel_offsetY \
                                         -u $PANEL_UNDERLINE \
                                         -f "$PANEL_FONT:size=$(fontsize)" -F "$DEFAULT_FG" -B "$DEFAULT_BG" &

# vim: set ft=sh: #
