#!/usr/bin/dash
# sdothum - 2016 (c) wtfpl

# Sysadmin
# ══════════════════════════════════════════════════════════════════════════════

# ..................................................................... Password

usage() { echo "usage: $(basename $0) <name> | a'dd <name> <password> | eX'port [<passphrase>] | G|g'enerate <name> | I'nitialize | i'mport | [l|L]'ist <search> | m'v <name> <'name> | R'm <name>"; exit 1; }

PASSWORD_STORE_DIR=${PASSWORD_STORE_DIR:-$HOME/.password-store}
PASS=/usr/bin/pass
PINENTRY=/usr/bin/pinentry
XDIR=$HOME/sandbox
image=$(basename $0).sh

# set appropriate pinentry UI
.pinentry >/dev/null

init() {
  ifno 'initialize password store' && exit 1
  [ -d $PASSWORD_STORE_DIR ] && mv -v $PASSWORD_STORE_DIR $PASSWORD_STORE_DIR.save
  $PASS init sdothum@gmail.com
  ditto -- 'import (rebuild) your password store'
}

password() {
  if [ $# -eq 1 ] ;then
    if password=$($PASS $1 2>/dev/null) ;then
      [ -e $PASSWORD_STORE_DIR/username/${1#*/}.gpg ] && username=$($PASS username/${1#*/}) || username=$($PASS username/default)
      [ -t 1 ] && echo "$username\n$password"
      notify $1 "$username\n$password"
      $PASS show --clip $1 >/dev/null 2>&1  # suppress message will clear warning
    else
      echo "Undefined password"
    fi
  fi
}

xport() {
  echo $@ | grep -q ' ' && { ditto export 'passphrase may not contain blanks'; exit 1; }
  cd $XDIR
  # rm -fv ${image%.sh}.zip
  rm -fv ${image%.sh}.7z
  echo "#!/usr/bin/dash
pass I || exit" >$image
  names=$(find $PASSWORD_STORE_DIR -name '*.gpg' | sed "s,$PASSWORD_STORE_DIR/,,g; s/.gpg$//")
  for i in $names ;do
    ditto exporting "$i"
    key=$($PASS $i | sed "s/'/'\"'\"'/")
    echo "pass i $i '$key'" >>$image
  done
  echo "rm -f $image" >>$image
  chmod -c 700 $image
  # zip -m -P "$(passphrase pass/master)" ${image%.sh} $image
  7zip a -p$1 ${image%.sh} $image
}

# list() { tree -f $PASSWORD_STORE_DIR | grep '.gpg$' | sed  "s|.*$PASSWORD_STORE_DIR/||; s/.gpg$//" | tr '/' ' '; }
list() { tree -f $PASSWORD_STORE_DIR | grep '.gpg$' | sed -r "s|.*$PASSWORD_STORE_DIR/||; s/.gpg$//; s|(.*)/(.*)|\1 \2|"; }

# password manager
case $1 in
a ) [ $# -eq 3 ] && { echo "$3\n$3" | $PASS insert --force $2; exec pass $2; } ;;
G ) [ $# -eq 2 ] && { $PASS generate --no-symbols --force --clip $2 12; exec pass $2; } ;;
g ) [ $# -eq 2 ] && { $PASS generate --force --clip $2 12; exec pass $2; } ;;
I ) init; exit ;;
i ) [ $# -eq 3 ] && { ditto importing "$2"; echo "$3\n$3" >/tmp/pass; exec $PASS insert --force $2 </tmp/pass >>/tmp/pass.log 2>&1; } ;;
l )  shift && { [ "$1" ] && list | a " .*$1.*" || list; exit; } ;;
L )  shift && { [ "$1" ] && list | a "^[^ ]*$1.*[ ]" || list | cut -d' ' -f1 | sort -u; exit; } ;;
m ) [ $# -eq 3 ] && { $PASS mv --force $2 $3; exec pass $3; } ;;
R ) [ $# -eq 2 ] && { exec $PASS rm --recursive --force $2; } ;;
X ) shift; xport "$@"; exit ;;  # passphrase should not contain blanks
* ) password $@ ;;
esac

underline
usage

# vim: set ft=sh: #
