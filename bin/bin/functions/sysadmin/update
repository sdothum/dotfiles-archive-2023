#!/usr/bin/bash
# sdothum - 2016 (c) wtfpl

# Sysadmin
# ══════════════════════════════════════════════════════════════════════════════

# ................................................................ Rsync wrapper

usage() { echo "usage: $(basename $0) [--list-only] [<option>] alpine | arm | backup | depot | dotfiles | home | pi | server | stow | ttrss | usb [hostname] | vps | wiki | xbps | [--delete] <command>"; exit 1; }

EXCLUDE=$(dirname $0)/.rsync_exclude
PLEX=/opt/plexmediaserver/Library/Application\ Support
ALPINE=motu  # test alpine host

# import user path
. $HOME/bin/functions/shell/user_path colors  # bash shell required for cron colors

laptop=lumen
netbook=monad
server && target=$laptop || target=$SERVER

isopt "$1" && { option=$1; shift; } || option='-a'
dotfiles=$(cat $(dirname $(which dotfiles))/.dotfiles:folders)

# sync but..
# exclude="-r --delete --delete-excluded --exclude='lost+found' $(for i in $(cat $EXCLUDE) ;do [ -n $i ] && echo -n " --exclude='$i'" ;done)"
exclude_http_local='--exclude=thedarnedestthing.db --exclude=log'
exclude_trash='--exclude=Trash --exclude=Logs --exclude="*.corrupted" --exclude=sync-conflict'

rsync()      { eval ditto rsync \"$@\";      /usr/bin/rsync --info=progress2 $option --exclude='lost+found' $@ 2>>/tmp/update:rsync.log; }
sudo_rsync() { eval ditto rsync \"$@\"; sudo /usr/bin/rsync --info=progress2 $option --exclude='lost+found' $@ 2>>/tmp/update:rsync.log; }

rsync_home() {
  # passport source directory precludes using default rsync(), see usb()
  ditto exclude "$(cat $EXCLUDE | tr '\n' ' ')"
  ditto rsync "$HOME $1" 
  /usr/bin/rsync --info=progress2 $option -r --delete --delete-excluded --exclude-from=$EXCLUDE $HOME "$1"
  # syncthing index most often corrupted
  rm -rfv "$1/$USER/.config/syncthing/index*"
}

archive() {
  if server ;then
    ifyes 'backup media server databases to /net/archive' && {
      mkdir -pv /net/archive/var/lib || exit 1
      sudo_rsync -r --delete /var/lib/sonarr /net/archive/var/lib/
      # [ -d /net/archive/${PLEX#/} ] || mkdir -pv /net/archive/${PLEX#/} || exit 1
      # sudo_rsync -r --delete $PLEX/Plex\ Media\ Server /net/archive/${PLEX#/}/
      mkdir -p /net/archive/srv/lib || exit 1
      # sudo_rsync -r --delete /srv/lib/postgres /net/archive/srv/lib/
      sudo_rsync -r --delete /var/lib/mysql /net/archive/var/lib/
      mkdir -p /net/archive/etc/webapps/tt-rss || exit 1
      sudo_rsync /etc/webapps/tt-rss/config.php /net/archive/etc/webapps/tt-rss/
    }
  fi
}

dotfiles() {
  [ -d /run/media/$USER/Repo/depot/dotfiles ] || return
  cd $HOME/stow
  rsync -r --delete $dotfiles /run/media/$USER/Repo/depot/dotfiles/
}

music() {
  if laptop ;then
    ifyes "replicate mpd music database from $SERVER" && {
      killall mpd
      if [ ! -d /net/media ] ;then
        sudo mkdir /net/media
        sudo chown -c $USER:users /net/media
      fi
      rsync -r --delete $USER@$SERVER:.mpd $HOME/
      rsync -r --delete $SERVER:/net/media/music /net/media/
      nohup mpd >/dev/null 2>&1 &
    }
  else
    ditto INFO "initiate update request from $laptop"
  fi
}

restore() {
  if server ;then
    ifno 'restore media server databases from /net/archive' || {
      sudo systemctl stop sonarr
      sudo_rsync -r --delete /net/archive/var/lib/sonarr /var/lib/
      sudo systemctl start sonarr
      # sudo systemctl stop plexmediaserver
      # sudo_rsync -r --delete /net/archive/${PLEX#/}/Plex\ Media\ Server $PLEX/
      # sudo systemctl start plexmediaserver
      # sudo systemctl stop postgres
      # sudo_rsync -r --delete /net/archive/srv/lib/postgres /srv/lib/
      # sudo systemctl start postgres
      sudo systemctl stop mysqld
      sudo_rsync -r --delete /net/archive/var/lib/mysql /var/lib/
      sudo systemctl start mysqld
      sudo systemctl stop tt-rss
      sudo_rsync /net/archive/etc/webapps/tt-rss/config.php /etc/webapps/tt-rss/
      sudo systemctl start tt-rss
    }
  fi
}

stow() {
  if server ;then
    sudo chown -cR $USER:users $HOME/stow/build/build/qmk_firmware
    ifyes "backup stow to $laptop" &&
      rsync -r --delete --exclude=.SyncArchive $STOW $USER@$laptop:$HOME/
    ifyes "backup stow to $netbook" &&
      rsync -r --delete --exclude=.SyncArchive $STOW $USER@$netbook:$HOME/
  else
    ifno "update stow to $SERVER" || rsync --exclude=.SyncArchive $STOW $USER@$SERVER:$HOME/
  fi
}

usb() {
  [ -d /run/media/$USER/Repo/home ] && USB=/run/media/$USER/Repo/home
  [ -d /run/media/$USER/$(hostname)/home ] && USB=/run/media/$USER/$(hostname)/home
  # [ -d /run/media/$USER/My\ Passport/home ] && USB=/run/media/$USER/My\ Passport/home
  if [ -d "$USB" ] ;then
    rsync_home "$USB/"
    # rsync -r --delete $HOME/bin/functions/log "$USB/$USER/bin/functions/"
    # rsync -r --delete $STOW/mail/Maildir "$USB/$USER/stow/mail/"
    # mkdir -p "$USB/$USER/.cache"
    # rsync $HOME/.cache/fcache:* "$USB/$USER/.cache/"
  elif [ -d /media/home ] ;then
    rsync_home /media/home/
    rsync $HOME/.password-store /media/home/$USER/
  elif [ -d /run/media/$USER/My\ Passport ] ;then
    ifyes "backup home photos & ebooks to USB drive" || exit
    PASSPORT=/run/media/$USER/My\ Passport
    mkdir -pv "$PASSPORT/media" || exit 1
    # rsync -r --delete /net/media/videos/series "$PASSPORT/media/videos/"
    rsync_home "$PASSPORT/home/"
    rsync -r --delete /net/photos "$PASSPORT/"
    rsync -r --delete /net/media/ebooks "$PASSPORT/media/"
  else
    ditto INFO "insert ($(hostname)/passport) usb drive"
  fi
}

vps() {
  TDT=/srv/http/thedarnedestthing.com
  APPLICATION=$TDT/application
  trace -- 'update => thedarnedestthing.com:/application'
  # exclude remote server's pid, state and socket for puma -- will cause misdirecting "no such file.. /tmp/puma-status-.." error 
  rsync -L --delete --exclude=vimwiki --exclude=logs --exclude=tmp $exclude_http_local $APPLICATION thedarnedestthing.com:$TDT/
  trace 'update => thedarnedestthing.com:/vimwiki'
  rsync -L --delete $HOME/vimwiki thedarnedestthing.com:$APPLICATION/public/
  trace 'restart => puma'
  /usr/bin/ssh thedarnedestthing.com $HOME/bin/functions/sysadmin/restart_puma
}

backup() { for i in /net/* ;do trace -- backup $i; rsync -r --delete --exclude='.cache' $i /backup/ ;done }

home() {
  [ $1 ] && HOME=/home/$1 || { ifyes "backup $HOME to /net/archive" || exit; }
  mkdir -pv /net/archive/home || exit 1
  trace -- backup $HOME
  rsync -r --delete --exclude='VirtualBox VMs' $exclude_trash $HOME /net/archive/home/
}

depot() {
  if server ;then
    ifyes "backup depot to $laptop" && rsync -r --delete /net/depot $laptop:/net/
  else
    ifno "restore depot to $SERVER" || rsync /net/depot $SERVER:/net/
  fi
}

wiki () {
  ifno 'recover thedarnedestthing.com:/vimwiki' && exit
  trace -- "thedarnedestthing.com:/vimwiki => $(hostname)"
  rsync -r --delete thedarnedestthing.com:/srv/http/thedarnedestthing.com/application/public/vimwiki $HOME/
}

exclude_alpine='--exclude=lost+found --exclude=sync-conflict --exclude=*.AppImage --exclude=.deprecated --exclude=.git --exclude=.history --exclude=.hg --exclude=job --exclude=xref'

# adhoc sync solution
alpinelinux() {
  if [ $(hostname) = $SERVER ] ;then
    rsync -av $exclude_alpine $HOME/stow $USER@motu:$HOME/
    rsync -av $exclude_alpine $HOME/stow $USER@lumen:$HOME/
  else
    rsync -av $exclude_alpine $USER@$SERVER:$HOME/stow $HOME/
  fi
}

case $1 in
''      ) usage ;;
alpine  ) alpinelinux ;;
arm     ) cpu arm && rsync -r --delete --exclude='*sync-conflict*' $USER@$SERVER:$STOW $HOME/ ;;
backup  ) home; server && ifyes 'backup /net to /backup' && backup ;;
BACKUP  ) backup ;;     # cron command only
home    ) home ;;
HOME    ) home cron ;;  # cron parm
depot   ) depot ;;
dotfiles) dotfiles ;;
music   ) music ;;
pi      ) server && rsync -r --delete /usr/share/icons/Paper pi:$HOME/.local/share/icons/ ;;
server  ) archive ;;
SERVER  ) restore ;;
stow    ) stow ;;
ttrss   ) rsync -r --delete /srv/http/tt-rss/themes/my*.css $target:/srv/http/tt-rss/themes/ ;;
usb     ) usb; sync ;;
vps     ) vps ;;
xbps    ) exec xb C ;;  # backup xbps cache
wiki    ) wiki ;;
*       ) if [ $2 ] ;then rsync $@ ;else usage ;fi ;;
esac

trace --  # elapsed time

# vim: set ft=sh: #
