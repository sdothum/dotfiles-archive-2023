#!/usr/bin/dash
# sdothum - 2016 (c) wtfpl

# File
# ══════════════════════════════════════════════════════════════════════════════

# ................................................................... Find cache

usage() {
  echo "usage: $(basename $0) I'nitialize"
  echo "usage: $(basename $0) [type] <dir> [<options>*], type -> find -type <type>"
  echo "usage: $(basename $0) - <dir> [<options>*], force directory cache update"
  ls -l $FCACHE:*
  exit 1
}

FCACHE=$CACHEDIR/fcache
BOOKMARKS="$(dirname $0)/.fcache:bookmarks"

# Note: non-directory caches automatically update their associated directory caches via stest
#       but directory caches (used in fuzzy jumping) require manual updating, as required,
#       to avoid triggering unnecessary file scans (directory trees being restructured far
#       less frequently than regular file creation/deletion)

# zero caches from interrupted builds can cause hangs, ignore pacaur/pkg permission denials 
find $CACHEDIR -name 'fcache:*' -size 0c -exec rm {} \; 2>/dev/null

# speed up fuzzy searches (especially arm), see shell/j j.fish

while [ $1 ] ;do
  case $1 in
    I*        ) rm -fv $FCACHE*; exit ;;
    !         ) not=! ;;
    [bcdflps] ) type=$1 ;;
    '-'       ) refresh=true ;;
    -maxdepth ) maxdepth="-maxdepth $2"; shift ;;
    -perm     ) perm="$not -perm $2"; unset not; shift ;;
    -regex    ) regex="$regex $not -regex '$2'"; type=f; filter=cat; unset not; shift ;;
    -regextype) regextype="-regextype $2"; shift ;;
    *         ) [ -d $1 ] && node=$1 || usage; [ $type ] || type=d ;;
  esac
  shift
done

cname() { echo $node | tr '/' ':'; }

cache=$FCACHE:$type$(cname $node)
dcache=$FCACHE:d$(cname $node)

# if unchanged files in non-directory search, return cache
# Note: always returns directory cache
if [ -e $cache ] && [ -e $dcache ] && [ -z $refresh ] ;then
  [ $type != d ] && stest -dqr -n $dcache $(cat $dcache) || exec cat $cache $BOOKMARKS  # append bookmarks
fi

notify "$node" 'Updating fcache'
# following links can be problematic for concurrent finds (locking issue)
[ -L $node ] && link='-L'

eval find $link $node $maxdepth -type d 2>/dev/null | ${filter:-exclude} >$dcache &
[ $type = d ] || eval find $link $node $maxdepth $perm $regextype $regex -type $type 2>/dev/null | ${filter:-exclude} >$cache &

wait
grep -q "$node" $FCACHE || echo $type $node $maxdepth $perm $regextype $regex >>$FCACHE  # see fcached (tbd)
[ $nocat ] || cat $cache $BOOKMARKS                                                      # append bookmarks

# vim: set ft=sh: #
