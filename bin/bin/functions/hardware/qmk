#!/usr/bin/dash
# sdothum - 2016 (c) wtfpl

# Hardware
# ══════════════════════════════════════════════════════════════════════════════

# ............................................................... QMK collection

usage() { echo "usage: $(basename $0) <keyboard> <keymap> [steno [nomouse]] [<string> [<string>]] [flash]"; exit 1; }

[ $2 ] || usage
model=$1
keymap=$2
shift 2

case $model in
chimera) KBD=chimera_ergo_42 ;;
corne  ) KBD=crkbd ;;
*      ) KBD=$model ;;
esac

# ROOT=/net/depot
ROOT=$HOME
QMK=$ROOT/qmk_firmware
KEYBOARD=$QMK/keyboards/$KBD
KEYMAP=$KEYBOARD/keymaps/$keymap
JSON=$KEYBOARD/keymaps/$keymap/*.json
CONFIG=$KEYMAP/config.h
MAKEFILE=$KEYMAP/rules.mk
SOURCE=$STOW/$model/${KEYMAP#$ROOT/}

[ -d $SOURCE ] || { ditto $keymap 'keymap not found'; usage; }
ditto "$KEYBOARD" "$keymap"
ifno 'sync qmk_firmware repo' || { cd $QMK; rm -rf $KEYBOARD; git pull origin master; }

# update keymap from stow repo
mkdir -p $KEYMAP 2>/dev/null
rsync -avq -KL --exclude .deprecated $SOURCE $KEYBOARD/keymaps
# splitography is not in official repo
[ $KBD = splitography ] && rsync -avq --no-r -KL ${SOURCE%/keymaps/*}/* $KEYBOARD

# georgi template bypasses config.h #define's
if [ $KBD = georgi ] ;then
  case $1 in
  '' | flash) ;;
  *         ) sed -i "s/STR(SECRET)/STR($1)/" $JSON; shift ;;
  esac
  case $1 in
  '' | flash) sed -i "s/STR(PUBLIC)/STR($(cat $HOME/.forward))/" $JSON ;;
  *         ) sed -i "s/STR(PUBLIC)/STR($1)/" $JSON; shift ;;
  esac

  # generate keymap.c from json
  cd $QMK/users/dennytom/chording_engine
  python *parser.py $JSON $KEYMAP/keymap.c
else
  # steno (mouse may need to be disabled in config.h)
  if [ "$1" = steno ] ;then
    sed -i '/STENO_ENABLE/s/= no /= yes/' $MAKEFILE
    shift
    [ "$1" = nomouse ] && { sed -i '/MOUSEKEY_ENABLE/s/= yes/= no /' $MAKEFILE; shift; }
  else
    sed -i '/STENO_ENABLE/s/= yes/= no /' $MAKEFILE
  fi

  # compile time macro sting
  grep -q PRIVATE_STRING $CONFIG || sed -i '$a#define PRIVATE_STRING ""' $CONFIG
  grep -q PUBLIC_STRING $CONFIG || sed -i '$a#define PUBLIC_STRING ""' $CONFIG

  case $1 in
  '' | flash) sed -i "/#define PRIVATE_STRING/c#define PRIVATE_STRING \"\"" $CONFIG ;;
  *         ) sed -i "/#define PRIVATE_STRING/c#define PRIVATE_STRING \"$1\"" $CONFIG; shift ;;
  esac
  case $1 in
  '' | flash) sed -i "/#define PUBLIC_STRING/c#define PUBLIC_STRING \"$(cat $HOME/.forward)\"" $CONFIG ;;
  *         ) sed -i "/#define PUBLIC_STRING/c#define PUBLIC_STRING \"$1\"" $CONFIG; shift ;;
  esac
fi

cd $QMK
[ -e $KEYMAP/common ] && export CPATH=$KEYMAP/common || export CPATH=$KEYMAP
# sudo make $KBD:$keymap:clean
echo CPATH=$CPATH
case $model in
corne  |\
chimera) [ "$1" = flash ] && sudo CPATH=$CPATH make $KBD:$keymap:avrdude  || make $KBD:$keymap ;;
planck ) [ "$1" = flash ] && sudo CPATH=$CPATH make $KBD/rev1:$keymap:dfu || make $KBD/rev1:$keymap ;;  # rev1 board
*      ) [ "$1" = flash ] && sudo CPATH=$CPATH make $KBD:$keymap:dfu      || make $KBD:$keymap ;;
esac
sudo chown -R $USER:users $QMK

# vim: set ft=sh: #
