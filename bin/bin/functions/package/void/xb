#!/usr/bin/dash
# sdothum - 2016 (c) wtfpl

# Package
# ══════════════════════════════════════════════════════════════════════════════

# ........................................................... Package management

usage() {
  echo "usage: $(basename $0) [-] S[S] | D | U | R | H | Q [-<options>] [--<option>]* <package>"
  echo "        S .. sync noconfirm"
  echo "       -S .. sync confirm"
  echo "       SS .. sync force noconfirm"
  echo "       -S    update repos"
  echo "        D .. downgrade"
  echo "        U .. update noconfirm"
  echo "       -U .. update confirm"
  echo "        R .. remove recursive"
  echo "       -R .. remove non-recursive"
  echo "        H .. hold"
  echo "       -H .. unhold"
  echo "        Q .. installed"
  echo "    .. $(basename $0) C | H | S | U"
  echo "        C    backup cache"
  echo "        H    held (list)"
  echo "        S    installed (count)"
  echo "        U    upgrade system"
  echo "    .. $(basename $0) [/ | f** | [-]d | h] [<package> | <file>**]"
  echo "        / .. search (package and description)"
  echo "        f .. find (file)"
  echo "        d .. dependencies"
  echo "       -d .. required by"
  echo "        h .. history"
  echo "          .. query"
  exit 1
}

CACHE=/var/cache/xbps
BACKUP=/net/depot/
XBDIR=${0%/*}
ACTIONS=$XBDIR/.xb_actions  # tuple: <action> <package> -> file: .xb_<action>, see upgrade_check and upgrade_actions 
[ $1 ] || usage

# kernel must be last of ordered action tuples, see file .xb_kernel
[ -e $ACTIONS ] && upgrade_actions=$(cat $ACTIONS | sed 's/#.*//')  # prune comments
upgrade_actions="$upgrade_actions
  kernel  linux[0-9]
"

flag() { package=$(echo "$update" | grep "^$2" | head -1); [ "$package" ] && { ditto $1 "$package"; eval $1=true; } }

upgrade_check() {
  sudo xbps-install -S
  update=$(xbps-install -un |  cut -d' ' -f1)
  set -- $upgrade_actions
  while [ $2 ] ;do
    flag $1 "$2"
    shift 2
  done
  xlocate -S >/dev/null 2>&1 &
}

# default (no options) to package query
case $1 in
 C) [ $2 ] && usage || action=backup ;;
 S) [ $2 ] && { action=sync; yes='-y'; } || action=count ;;
SS) [ $2 ] && { action=force; yes='-y'; } ;;
-S) [ $2 ] && action=sync || sudo xbps-install -S; exit ;;
 D) action=downgrade ;;
 U) [ $2 ] && { action=update; yes='-y'; } || { action=upgrade; upgrade_check; } ;;
-U) [ $2 ] && action=update ;;
 R) action=remove; recursive='-R' ;;
-R) action=remove ;;
 H) [ $2 ] && action=hold || action=held ;;
-H) action=unhold ;;
 Q) action=installed ;;
/*) action=search; [ $1 = '/' ] || { package=${1#/}; shift; set -- 0 $package $@; } ;;  # allow /<pattern> short form (no action separator)
f ) action=file ;;
 d) action=dependency ;;
-d) action=requiredby ;;
h ) action=history ;;
* ) action=query; set -- 0 $@ ;;  # preserve argv stack
esac

shift; [ $1 ] || case $action in
backup ) ;;
held   ) ;;
history) ;;
count  ) ;;
upgrade) ;;
*      ) usage ;;
esac

options=" $@"
package=${options##* }
options=${options% *}
[ $action = file ] || { [ $package ] && pkgver=$(xbps-query -S $package | grep pkgver | cut -d' ' -f2); }

upgrade_actions() {
  set -- $upgrade_actions
  while [ $2 ] ;do 
    eval [ \$$1 ] && { [ -e $XBDIR/.xb_$1 ] && . $XBDIR/.xb_$1 || post_install $2; }
    shift 2
  done
}

history() {
  xilog | grep $(xilog | tail -1 | awk '{ print $3 }')
  ifno 'full history' || xilog | tac | less
}

version() { sed 's|^.*/||; s/^[a-zA-Z-]*//; s/.x.*//'; }  # trim path*, package name and extension*
latest()  { package=$(echo $1 | sed 's/-[0-9].*//'); xbps-query -Rs "$package-" | grep "$package-[0-9]" | cut -d' ' -f2 | version; }
cached()  { package=$(echo $1 | sed 's/-[0-9].*//'); xb h "$package-" | grep "$package-[0-9]" | tail -1 | version; }
status()  { current=$(echo $1 | version); latest=$(latest $1); cached=$(cached $1); [ "$cached" != "$latest" ] && { [ "$current" = "$cached" ] || echo -n "$NOCOLOR[$cached] "; }; echo "$__RED$latest"; }

case $action in
backup    ) rsync $CACHE $BACKUP ;;
count     ) ditto installed "$(xbps-query -l $options | wc -l) packages" ;;
dependency) xbps-query -x $package ;;
downgrade ) sudo xdowngrade $@ ;;  # downgrade must include package dependencies
file      ) xlocate $package ;;
force     ) sudo xbps-install -f $yes $options $package ;;
held      ) for i in $(xbps-query --list-hold-pkgs) ;do ditto held "$i $(status $i)" ;done ;;
history   ) [ $package ] && ls -l $CACHE/$package* || history ;;
hold      ) [ $pkgver ] && { sudo xbps-pkgdb -m hold $options $package; ditto hold "$pkgver"; } ;;
installed ) xbps-query -l $options | cut -d' ' -f2- | sed -r "s/^([^ ]*)/${YELLOW}\1${NOCOLOR}/" | grep "$@" && ditto installed "$@" ;;
query     ) [ $options ] && xbps-query -R $options $package || xbps-query -Rs $options "$package" | a $package ;;
remove    ) sudo xbps-remove $recursive $options $package ;;
requiredby) xbps-query -X $package ;;
search    ) xbps-query -Rs $options $package | a $package ;;
sync      ) sudo xbps-install $yes $options $package ;;
update    ) sudo xbps-install $yes $options -u $package ;;
upgrade   ) sudo xbps-install -y -u xbps | grep -q 'is up to date' || exec xb U; sudo xbps-install $options -u; upgrade_actions; xb H ;;
unhold    ) [ $pkgver ] && { sudo xbps-pkgdb -m unhold $options $package; ditto unhold "$pkgver"; } ;;
esac

# vim: set ft=sh: #
