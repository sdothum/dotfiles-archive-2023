# sdothum - 2016 (c) wtfpl

# Make
# ══════════════════════════════════════════════════════════════════════════════

# ...................................................................... iosevka

# make_install iosevka ..
# eg. make_install iosevka extended round +Q (grotesque width coding font, reduce display fontsize by 1) **
#                  iosevka extended proof    (grotesque width prose font) **
#                  iosevka extended menu +Q **
#                  iosevka ebook **
#                  ** fonts i use, with and without +Q
#
#                  iosevka default           (regular iosevka half width coding font)
#                  iosevka default jost round
#                  iosevka extended jost proof +j family jost-proof
usage() {
  echo "usage: $(basename $0) iosevka  default (width) | extended | ebook | menu
                                     [atkinson | jost] [+[d | j | Q]]
                                     [proof | leading <decimal>]
                                     [cap [-+]<emu>]
                                     [shape [-+]<emu>]
                                     [weight <integer>]
                                     [xheight [-+]<emu>]
                                     [round | sb <decimal>]
                                     [family <name>]"
  exit 1
}

# exhibit..
# A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9
# a b c d e f g h i j k l m n o p q r s t u v w x y z      @   $ %   &      { }

REPO=/net/depot/Iosevka
FONT=$HOME/.fonts/iosevka

leading=1.25  # default coding line spacing
weight=400    # regular weight

# atkinson hyperlegible typeface
atkinson() {
  curlyq=true
  capital_g=toothed-serifless-hooked
  capital_i=serifed
  capital_k=straight
  capital_q=crossing
  d=toothed-serifless
  f=flat-hook-crossbar-at-x-height
  i=hooky
  j=flat-hook-serifless
  k=straight
  l=flat-tailed
  q=diagonal-tailed
  t=flat-hook-short-neck2
  y=straight-turn
  zero=reverse-slashed
  one=nobase-flat-top-serif
  six=closed-contour
}

# jost* typeface
jost() {
  unset curlyq
  capital_g=toothless-rounded-serifless-hooked
  capital_i=serifless
  capital_k=symmetric-touching
  capital_q=crossing
  d=toothed-serifless
  f=serifless-crossbar-at-x-height
  i=serifless
  j=serifless
  k=symmetric-touching
  l=serifless
  q=straight
  t=cross
  y=straight
  zero=unslashed-oval
  one=nobase
  six=straight-bar
}

variant() {
  case $1 in
  Q) capital_q=detached-tailed ;;
  d) d=tailed-serifless ;;
  j) j=straight-line ;;
  esac
}

integer() {
  [ $1 ]                    || exit 1
  [ $1 -eq $1 2>/dev/null ] || exit 1
  echo $1
}

real() {
  integer ${1#*.} || exit 1
  integer ${1%.*} || exit 1
  echo $1
}

adjust() {
   integer $2 || exit 1
   echo $(( $1 + $2 ))
}

# optional metric overrides
cap()     { cap="cap = $1"; }
sb()      { sb="sb = $1"; }
xheight() { xheight="xheight = $1"; }

atkinson      # default typeface

shift
while [ $1 ] ;do
  case "$1" in
  atkinson) atkinson; family=-atkinson ;;                         # add typeface name
  cap     ) cap $(integer $2)         || usage; shift ;;          # H height (affects descender as well)
  +d      ) variant d ;;                                          # tailed d
  default ) shape=500 ;;                                          # default width
  ebook   ) shape=576; sb 0.6000; leading=1.2500; font=iosevka; family=-hyperlegible; ebook=true ;;
  extended) shape=576; sb 0.7000 ;;                               # default extended width
  family  ) [ $2 ] && family=-$2      || usage; shift ;;
  +j      ) variant j ;;                                          # straight-line j
  jost    ) jost; cap +75; family=-jost ;;
  leading ) leading=$(real $2)        || usage; shift ;;          # line spacing > 1.0
  menu    ) leading=1.5000; sb 0.9000; family=-menu           ;;  # rofi menu
  proof   ) leading=1.8000; sb 0.8000; family=${family}-proof ;;  # prose display needs less sb (larger fontsize)
  +Q      ) variant Q ;;                                          # tailed Q
  round   ) sb 0.7000 ;;                                          # round closed lower case characters by reducing sb
  sb      ) sb $(real $2)             || usage; shift ;;          # side bearing (spacing)
  shape   ) shape=$(adjust $shape $2) || usage; shift ;;          # cell width
  weight  ) weight=$(integer $2)      || usage; shift ;;          # regular weight
  xheight ) xheight $(integer $2)     || usage; shift ;;          # height of x (experimental for larger fontsizes)
  *       ) usage ;;
  esac
  shift
done

[ $shape ] || usage
[ $font ] || name=$family
ifyes "build ${font:-Iosevka}$name" || usage
FONT=$FONT$family
REGULAR=$FONT/ttf/iosevka$family-regular.ttf

cd ${REPO%/*}
# install iosevka repo
[ -d Iosevka ] && { ifno 'sync iosevka repo' || git pull --unshallow; } || git clone --depth 1 https://github.com/be5invis/Iosevka.git
cd Iosevka
# rm -rf build dist 2>/dev/null

# a tweaked :-) atkinson hyperlegible font character emulation
# based on sample.toml (with quote and backtick conversion to single quotes)
echo "
[buildPlans.iosevka$family]       # <iosevka-custom> is your plan name
family = '${font:-Iosevka}$name'  # Font menu family name
spacing = 'term'                  # Optional; Values: 'normal', 'term', 'fontconfig-mono', or 'fixed'
serifs = 'sans'                   # Optional; Values: 'sans' or 'slab'
no-cv-ss = true

###################################################################################################
# Configure variants

# Optional; Whether to inherit a 'ss##' variant
[buildPlans.iosevka$family.variants]
# inherits = 'ss01'              # use defaults instead (of inheriting)

# Optional; Configure single character's variant
[buildPlans.iosevka$family.variants.design]
capital-d = 'more-rounded-serifless'  # D
capital-g = '$capital_g'              # G
capital-i = '$capital_i'              # I
capital-j = 'serifless'               # J
capital-k = '$capital_k'              # K
capital-m = 'flat-bottom'             # M
capital-q = '$capital_q'              # Q
capital-w = 'straight-flat-top'       # W
d = '$d'
f = '$f'
i = '$i'
j = '$j'
k = '$k'
l = '$l'
q = '$q'
r = 'compact'
t = '$t'
w = 'straight-flat-top'
y = '$y'
zero = '$zero'                        # 0
one = '$one'                          # 1
two = 'straight-neck'                 # 2
four = 'closed'                       # 4
five = 'oblique-upper-left-bar'       # 5
six = '$six'                          # 6
eight = 'two-circles'                 # 8
brace = 'straight'                    # {}
ampersand = 'upper-open'              # &
# at = 'fourfold'
at = 'short'                          # @
cyrl-ka = 'symmetric-touching'        # к
lower-iota = 'flat-tailed'            # ι
lower-lambda = 'straight-turn'        # λ
# number-sign = 'slanted'
paragraph-sign = 'low'                # ¶
# percent = 'rings-continuous-slash'
percent = 'dots'                      # %

# Optional; Configure single character's variant for Upright and Oblique; Overrides [design]
[buildPlans.iosevka$family.variants.upright]

# Optional; Configure single character's variant for Italic only; Overrides [design]
[buildPlans.iosevka$family.variants.italic]
a = 'double-storey'
d = '$d'
e = 'flat-crossbar'
f = '$f'
k = '$k'
u = 'toothed'
y = '$y'
eszet = 'sulzbacher'                  # ß

# End variant section
###################################################################################################

###################################################################################################
# Configure ligations

[buildPlans.iosevka$family.ligations]
inherits = 'default-calt'   # Optional; inherits an existing ligation set
disables = []               # Optional; disable specific ligation groups, overrides inherited ligation set
enables  = []               # Optional; enable specific ligation groups, overrides inherited ligation set

# End ligation section
###################################################################################################


###################################################################################################
# Override default building weights
# When buildPlans.<plan name>.weights is absent, all weights would built and mapped to
# default values.
# IMPORTANT : Currently 'menu' and 'css' property only support numbers between 0 and 1000.
#             and 'shape' properly only supports number between 100 and 900 (inclusive).
#             If you decide to use custom weights you have to define all the weights you
#             plan to use otherwise they will not be built.
[buildPlans.iosevka$family.weights.regular]
shape = $weight  # Weight for glyph shapes.
menu  = $weight  # Weight for the font's names.
css   = $weight  # Weight for webfont CSS.

[buildPlans.iosevka$family.weights.book]
shape = 450
menu  = 450  # Use 450 here to name the font's weight 'Book'
css   = 450

[buildPlans.iosevka$family.weights.bold]
shape = 700
menu  = 700
css   = 700

# End weight section
###################################################################################################

###################################################################################################
# Override default building slope sets
# Format: <upright|italic|oblique> = <'normal'|'italic'|'oblique'>
# When this section is absent, all slopes would be built.

[buildPlans.iosevka$family.slopes]
upright = 'normal'
italic = 'italic'
oblique = 'oblique'

# End slope section
###################################################################################################

###################################################################################################
# Override default building widths
# When buildPlans.<plan name>.widths is absent, all widths would built and mapped to
# default values.
# IMPORTANT : Currently 'shape' property only supports numbers between 434 and 664 (inclusive),
#             while 'menu' only supports integers between 1 and 9 (inclusive).
#             The 'shape' parameter specifies the unit width, measured in 1/1000 em. The glyphs'
#             width are equal to, or a simple multiple of the unit width.
#             If you decide to use custom widths you have to define all the widths you plan to use,
#             otherwise they will not be built.

[buildPlans.iosevka$family.widths.normal]
shape = $shape     # Unit Width, measured in 1/1000 em.
menu  = 5          # Width grade for the font's names.
css   = 'normal'   # 'font-stretch' property of webfont CSS.

[buildPlans.iosevka$family.widths.extended]
shape = 576
menu  = 7
css   = 'expanded'

# End width section
###################################################################################################

###################################################################################################
# Character Exclusion
# Specify character ranges in the section below to exclude certain characters from the font being
# built. Remove this section when this feature is not needed.

[buildPlans.iosevka$family.exclude-chars]
ranges = [[10003, 10008]]

# End character exclusion
###################################################################################################

###################################################################################################
# Compatibility Ligatures
# Certain applications like Emacs does not support proper programming liagtures provided by
# OpenType, but can support ligatures provided by PUA codepoints. Therefore you can edit the
# following section to build PUA characters that are generated from the OpenType ligatures.
# Remove this section when compatibility ligatures are not needed.

[[buildPlans.iosevka$family.compatibility-ligatures]]
unicode = 57600 # 0xE100
featureTag = 'calt'
sequence = '<*>'

# End compatibility ligatures section
###################################################################################################

###################################################################################################
# Metric overrides
# Certain metrics like line height (leading) could be overridden in your build plan file.
# Edit the values to change the metrics. Remove this section when overriding is not needed.

[buildPlans.iosevka$family.metric-override]
winMetricAscenderPad = 0
winMetricDescenderPad = 0
powerlineScaleY = 1
powerlineScaleX = 1
powerlineShiftY = 0
powerlineShiftX = 0

[buildPlans.iosevka$family.metric-override.multiplies]
leading = $leading
$sb

[buildPlans.iosevka$family.metric-override.adds]
$cap
$xheight

# End metric override section
###################################################################################################
" >$REPO/private-build-plans.toml

# ensure node.js is uptodate
npm install  # ignore npm funding and audit messages
# npm update

npm run build -- ttf::iosevka$family  # post Verda commits

[ $font ] && { mkdir -p $FONT; cp -v dist/iosevka$family/ttf/* $FONT; } || nerdfont ${family#-}  # insert glyphs

[ $curlyq ] && fforge_hyperlegible ${family#-}  # hyperlegible font mod for better q

[ $ebook ] && kindle_hyperlegible ${family#-}

# vim: set ft=sh: #
