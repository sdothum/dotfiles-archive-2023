# sdothum - 2016 (c) wtfpl

# Make
# ══════════════════════════════════════════════════════════════════════════════

# ...................................................................... iosevka

# for git iosevka 7.x

# make_install iosevka ..
# eg. make_install iosevka extended        (grotesque width coding font, reduce display fontsize by 1) **
#                  iosevka extended proof  (grotesque width prose font) **
#                  iosevka extended menu **
#                  iosevka ebook **
#                  ** fonts i use with variant optimizatons, full atkinson looks best in larger font sizes
#
#                  iosevka atkinson             (normal width hyperlegible coding font)
#                  iosevka extended jost proof  (extended width jost prose font)

usage() {
  echo "usage: $(basename $0) iosevka [grotesque (default) | atkinson | geometric | jost]
                             [normal (default) | extended | ebook]
                             [proof | menu | leading <decimal>]
                             [name <name>]
                             [cap [-+]<emu>]
                             [noround | sb <decimal>]
                             [shape [-+]<emu>]
                             [weight <integer>]
                             [xheight [-+]<emu>]"
  exit 1
}

# exhibit..
# A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9
# a b c d e f g h i j k l m n o p q r s t u v w x y z      @   $ %   &      { }

REPO=/net/depot/Iosevka
FONT=$HOME/.fonts/iosevka

leading=1.25  # default coding line spacing
weight=400    # regular weight

# atkinson hyperlegible typeface
grotesque() {
  curlyq=true
  capital_g=toothed-serifless-hooked
  capital_i=serifed
  capital_k=straight-serifless
  capital_q=detached-tailed
  f=flat-hook-crossbar-at-x-height
  i=hooky
  j=flat-hook-serifless
  k=straight-serifless
  l=flat-tailed
  q=diagonal-tailed
  t=flat-hook-short-neck2
  y=straight-turn
  zero=reverse-slashed
  one=nobase-flat-top-serif
  six=closed-contour
  ampersand=upper-open
  at=short
  cyrl_ka=straight-serifless
  dollar=through
  number_sign=upright
  percent=dots
}

# jost* typeface
geometric() {
  unset curlyq
  capital_g=toothless-rounded-serifless-hooked
  capital_i=serifless
  capital_k=symmetric-touching-serifless
  capital_q=detached-tailed
  f=serifless-crossbar-at-x-height
  i=serifless
  j=straight-line
  k=symmetric-touching-serifless
  l=serifless
  q=straight
  t=cross-short-neck2
  y=straight
  zero=unslashed-oval
  one=nobase
  six=straight-bar
  ampersand=upper-open
  at=short
  cyrl_ka=symmetric-touching-serifless
  dollar=through
  number_sign=upright
  percent=dots
}

# for stricter typeface matching
variant() {
  for o in $@ ;do  # unused var ($i in use for variant :)
    case $o in
    j          ) j=serifless ;;
    Q          ) capital_q=crossing ;;
    ampersand  ) ampersand=closed ;;
    at         ) at=fourfold ;;
    dollar     ) dollar=open ;;
    number_sign) number_sign=slanted ;;
    percent    ) percent=rings-continuous-slash ;;
    esac
  done
  [ "$name" = '-monolegible' ] && name=-hyperlegible
}

integer() {
  [ $1 ]                    || exit 1
  [ $1 -eq $1 2>/dev/null ] || exit 1
  echo $1
}

real() {
  integer ${1#*.} || exit 1
  integer ${1%.*} || exit 1
  echo $1
}

adjust() {
   integer $2 || exit 1
   echo $(( $1 + $2 ))
}

# optional metric overrides
cap()     { cap="cap = $1"; }
sb()      { sb="sb = $1"; }
xheight() { xheight="xheight = $1"; }

grotesque      # default typeface
shape=500
sb 0.7000

shift
while [ $1 ] ;do
  case "$1" in
  # style
  normal   ) shape=500; sb 0.7000 ;;                           # normal width
  ebook    ) shape=576; sb 0.6000; leading=1.2500; family=iosevka; name=-monolegible; ebook=true ;;  # less sb with higher dpi
  extended ) shape=576; sb 0.7000 ;;                           # extended width
  menu     ) leading=1.5000; sb 0.9000; name=-menu ;;          # rofi menu
  proof    ) leading=1.8000; sb 0.8000; name=${name}-proof ;;  # prose display needs more sb (larger fontsize)
  # font
  grotesque) grotesque ;;
  atkinson ) grotesque; variant Q ampersand at number_sign percent ;;
  geometric) geometric; cap +75; name=-jost ;;
  jost     ) geometric; cap +75; name=-jost; variant j ampersand at dollar number_sign percent ;;
  name     ) [ $2 ] && name=-$2        || usage; shift ;;
  # custom
  cap      ) cap $(integer $2)         || usage; shift ;;      # H height (affects descender as well)
  leading  ) leading=$(real $2)        || usage; shift ;;      # line spacing > 1.0
  noround  ) unset sb ;;
  sb       ) sb $(real $2)             || usage; shift ;;      # side bearing (spacing)
  shape    ) shape=$(adjust $shape $2) || usage; shift ;;      # cell width
  weight   ) weight=$(integer $2)      || usage; shift ;;      # regular weight
  xheight  ) xheight $(integer $2)     || usage; shift ;;      # height of x (experimental for larger fontsizes)
  *        ) usage ;;
  esac
  shift
done

[ $shape ] || usage
[ $family ] || plan=$name
ifyes "build ${family:-Iosevka}$plan" || usage
FONT=$family$name
REGULAR=$family/ttf/iosevka$name-regular.ttf

cd ${REPO%/*}
# install iosevka repo
[ -d Iosevka ] && { ifno 'sync iosevka repo' || git pull --unshallow; } || git clone --depth 1 https://github.com/be5invis/Iosevka.git
cd Iosevka
# rm -rf build dist 2>/dev/null

# a tweaked :-) atkinson hyperlegible font character emulation
# based on sample.toml (with quote and backtick conversion to single quotes)
echo "
[buildPlans.iosevka$name]           # <iosevka-custom> is your plan name
family = '${family:-Iosevka}$plan'  # Font menu family name
spacing = 'term'                    # Optional; Values: 'normal', 'term', 'fontconfig-mono', or 'fixed'
serifs = 'sans'                     # Optional; Values: 'sans' or 'slab'
no-cv-ss = true

###################################################################################################
# Configure variants

# Optional; Whether to inherit a 'ss##' variant
[buildPlans.iosevka$name.variants]
# inherits = 'ss01'              # use defaults instead (of inheriting)

# Optional; Configure single character's variant
[buildPlans.iosevka$name.variants.design]
capital-d = 'more-rounded-serifless'  # D
capital-g = '$capital_g'              # G
capital-i = '$capital_i'              # I
capital-j = 'serifless'               # J
capital-k = '$capital_k'              # K
capital-m = 'flat-bottom'             # M
capital-q = '$capital_q'              # Q
capital-w = 'straight-flat-top'       # W
f = '$f'
i = '$i'
j = '$j'
k = '$k'
l = '$l'
q = '$q'
r = 'compact'
t = '$t'
w = 'straight-flat-top'
y = '$y'
zero = '$zero'                        # 0
one = '$one'                          # 1
two = 'straight-neck'                 # 2
four = 'closed'                       # 4
five = 'oblique-upper-left-bar'       # 5
six = '$six'                          # 6
eight = 'two-circles'                 # 8
brace = 'straight'                    # {}
ampersand = '$ampersand'              # &
at = '$at'                            # @
cyrl-ka = '$cyrl_ka'                  # к
dollar = '$dollar'                    # $
lower-iota = 'flat-tailed'            # ι
lower-lambda = 'straight-turn'        # λ
number-sign = '$number_sign'          # #
paragraph-sign = 'low'                # ¶
percent = '$percent'                  # %

# Optional; Configure single character's variant for Upright and Oblique; Overrides [design]
[buildPlans.iosevka$name.variants.upright]

# Optional; Configure single character's variant for Italic only; Overrides [design]
[buildPlans.iosevka$name.variants.italic]
a = 'double-storey-serifless'
d = 'toothed-serifless'
e = 'flat-crossbar'
f = '$f'
k = '$k'
u = 'toothed'
y = '$y'
eszet = 'sulzbacher'                  # ß

# End variant section
###################################################################################################

###################################################################################################
# Configure ligations

[buildPlans.iosevka$name.ligations]
inherits = 'default-calt'   # Optional; inherits an existing ligation set
disables = []               # Optional; disable specific ligation groups, overrides inherited ligation set
enables  = []               # Optional; enable specific ligation groups, overrides inherited ligation set

# End ligation section
###################################################################################################


###################################################################################################
# Override default building weights
# When buildPlans.<plan name>.weights is absent, all weights would built and mapped to
# default values.
# IMPORTANT : Currently 'menu' and 'css' property only support numbers between 0 and 1000.
#             and 'shape' properly only supports number between 100 and 900 (inclusive).
#             If you decide to use custom weights you have to define all the weights you
#             plan to use otherwise they will not be built.
[buildPlans.iosevka$name.weights.regular]
shape = $weight  # Weight for glyph shapes.
menu  = $weight  # Weight for the font's names.
css   = $weight  # Weight for webfont CSS.

[buildPlans.iosevka$name.weights.book]
shape = 450
menu  = 450  # Use 450 here to name the font's weight 'Book'
css   = 450

[buildPlans.iosevka$name.weights.bold]
shape = 700
menu  = 700
css   = 700

# End weight section
###################################################################################################

###################################################################################################
# Override default building slope sets
# Format: <upright|italic|oblique> = <'normal'|'italic'|'oblique'>
# When this section is absent, all slopes would be built.

[buildPlans.iosevka$name.slopes]
upright = 'normal'
italic = 'italic'
oblique = 'oblique'

# End slope section
###################################################################################################

###################################################################################################
# Override default building widths
# When buildPlans.<plan name>.widths is absent, all widths would built and mapped to
# default values.
# IMPORTANT : Currently 'shape' property only supports numbers between 434 and 664 (inclusive),
#             while 'menu' only supports integers between 1 and 9 (inclusive).
#             The 'shape' parameter specifies the unit width, measured in 1/1000 em. The glyphs'
#             width are equal to, or a simple multiple of the unit width.
#             If you decide to use custom widths you have to define all the widths you plan to use,
#             otherwise they will not be built.

[buildPlans.iosevka$name.widths.normal]
shape = $shape     # Unit Width, measured in 1/1000 em.
menu  = 5          # Width grade for the font's names.
css   = 'normal'   # 'font-stretch' property of webfont CSS.

[buildPlans.iosevka$name.widths.extended]
shape = 576
menu  = 7
css   = 'expanded'

# End width section
###################################################################################################

###################################################################################################
# Character Exclusion
# Specify character ranges in the section below to exclude certain characters from the font being
# built. Remove this section when this feature is not needed.

[buildPlans.iosevka$name.exclude-chars]
ranges = [[10003, 10008]]

# End character exclusion
###################################################################################################

###################################################################################################
# Compatibility Ligatures
# Certain applications like Emacs does not support proper programming liagtures provided by
# OpenType, but can support ligatures provided by PUA codepoints. Therefore you can edit the
# following section to build PUA characters that are generated from the OpenType ligatures.
# Remove this section when compatibility ligatures are not needed.

[[buildPlans.iosevka$name.compatibility-ligatures]]
unicode = 57600 # 0xE100
featureTag = 'calt'
sequence = '<*>'

# End compatibility ligatures section
###################################################################################################

###################################################################################################
# Metric overrides
# Certain metrics like line height (leading) could be overridden in your build plan file.
# Edit the values to change the metrics. Remove this section when overriding is not needed.

[buildPlans.iosevka$name.metric-override]
winMetricAscenderPad = 0
winMetricDescenderPad = 0
powerlineScaleY = 1
powerlineScaleX = 1
powerlineShiftY = 0
powerlineShiftX = 0

[buildPlans.iosevka$name.metric-override.multiplies]
leading = $leading
$sb

[buildPlans.iosevka$name.metric-override.adds]
$cap
$xheight

# End metric override section
###################################################################################################
" >$REPO/private-build-plans.toml

# ensure node.js is uptodate
npm install  # ignore npm funding and audit messages
# npm update

npm run build -- ttf::iosevka$name  # post Verda commits

[ $family ] && { mkdir -p $family; cp -v dist/iosevka$name/ttf/* $family; } || nerdfont ${name#-}  # insert glyphs

[ $curlyq ] && fforge_hyperlegible ${name#-}  # hyperlegible font mod for better q

[ $ebook ] && kindle_hyperlegible ${name#-}

# vim: set ft=sh: #
