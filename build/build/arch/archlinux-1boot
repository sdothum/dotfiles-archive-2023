#!/bin/sh
# sdothum - 2016 (c) wtfpl

# archlinux boot configuration

source ./archlinux-functions

# home user zsh config and install scripts will be copied to
user=${1:-shum}
echo "--> USER: $user"


heading 'set and generate locale'
# ══════════════════════════════════════════════════════════════════════════════
original /etc/locale.gen
sed -i 's/#\(en_US.UTF-8 UTF-8\)/\1/' /etc/locale.gen
echo LANG=en_US.UTF-8 >/etc/locale.conf
export LANG=en_US.UTF-8
locale-gen


heading 'set timezone and clock'
# ══════════════════════════════════════════════════════════════════════════════
# ls /usr/share/zoneinfo
# ls /usr/share/zoneinfo/America
# ln -sv /usr/share/zoneinfo/America/Toronto /etc/localtime
hwclock --systohc --utc
timedatectl set-timezone Canada/Eastern


heading 'set hostname'
# ══════════════════════════════════════════════════════════════════════════════
read -p "Hostname [archlinux]: " hostname
[ $hostname ] || hostname=archlinux
# hostnamectl set-hostname $hostname
echo $hostname >/etc/hostname
cat /etc/hosts
checkpoint


heading 'select scheduler for SSD'
# ══════════════════════════════════════════════════════════════════════════════
if [ ! $hostname = luna ] ;then
  if [ ! -f /etc/udev/rules.d/60-schedulers.rules ] ;then
    echo '# set deadline scheduler for non-rotating disks\
  ACTION=="add|change", KERNEL=="sda", ATTR{queue/rotational}=="0", ATTR{queue/scheduler}="deadline"' \
         >/etc/udev/rules.d/60-schedulers.rules
  fi
fi


heading 'check kvm compatibility'
# ══════════════════════════════════════════════════════════════════════════════
[ $hostname != luna ] && cfg_install /etc/modprobe.d/blacklist-kvm.conf
checkpoint


# heading 'set keyboard'
# # ══════════════════════════════════════════════════════════════════════════════
# if [ $hostname != luna ] ;then
#   [ -f /etc/vconsole.conf ] && sed -i 's/^\(KEYMAP\)=.*/\1=colemak/' /etc/vconsole.conf || echo KEYMAP=colemak >/etc/vconsole.conf
#   cat /etc/vconsole.conf
# else
#   echo 'us -> qwerty'
# fi


heading 'configure package manager'
# ══════════════════════════════════════════════════════════════════════════════
original /etc/pacman.conf
sed -i -e '/^\[options\]/aILoveCandy' \
    -e '/^#\[multilib\]/,+1s/^#//' \
    -e '/^#Color/s/^#//' \
    /etc/pacman.conf
pacman -Sy
checkpoint


heading 'configure network'
# ══════════════════════════════════════════════════════════════════════════════
[ $hostname = luna ] && systemctl enable dhcpcd.service
# heading 'disable systemd generated interface names in preference of kernel names e.g. wlan0'
# [ -f /etc/udev/rules.d/80-net-name-slot.rules ] || ln -sv /dev/null /etc/udev/rules.d/80-net-name-slot.rules


heading 'installing wireless tools'
# ══════════════════════════════════════════════════════════════════════════════
pm_install connman
pm_install dialog
pm_install iw
pm_install linux-headers
pm_install reflector
pm_install wpa_supplicant
# cp /etc/netctl/examples/wireless-wpa /etc/netctl/my-wireless-network
# essid=s/ESSID=.*/ESSID=$(wpa_passphrase "Ravens" "the keys of enoch" | grep ssid | sed 's/.*\(".*"\)/\1/')/
# key=s/Key=.*/Key=\\\\\"$(wpa_passphrase "Ravens" "the keys of enoch" | grep "[^#]psk" | sed 's/.*=\(.*\)/\1/')/
# sed -i -e $essid -e $key /etc/netctl/my-wireless-network
# netctl enable my-wireless-network
echo noarp >/etc/dhcpcd.conf
checkpoint


heading 'set root password'
# ══════════════════════════════════════════════════════════════════════════════
passwd
heading "create \"$user\" user account"
useradd -m -g users -G wheel,storage,power -s /bin/bash $user
passwd $user
checkpoint

pm_install sudo
original /etc/sudoers
sed -i '/# %wheel ALL=(ALL) NOPASSWD: ALL/s/# //; /## Defaults specification/aDefaults insults' /etc/sudoers
EDITOR=nano visudo
# cat /etc/sudoers
checkpoint


heading 'install base-devel'
# ══════════════════════════════════════════════════════════════════════════════
pm_install base-devel
# pm_install expac
pm_install git
pm_install gnome-keyring
# pm_install jshon
# pm_install namcap
# pm_install openssh
# pm_install yajl
checkpoint


heading 'default shell utilities'
# ══════════════════════════════════════════════════════════════════════════════
pm_install bc
pm_install dash
pm_install fish
pm_install gvim
cfg_install /etc/profile.d/path.sh
checkpoint


heading 'enable tty autologin'
# ══════════════════════════════════════════════════════════════════════════════
mkdir -pv /etc/systemd/system/getty@tty1.service.d
echo "[Service]
ExecStart=
ExecStart=-/usr/bin/agetty --autologin $user --noclear %I 38400 linux" >/etc/systemd/system/getty@tty1.service.d/autologin.conf

# heading 'set systemd readahead, disable if performance is impaired..'
# systemctl enable systemd-readahead-collect
# systemctl enable systemd-readahead-replay
checkpoint


heading 'configure btrfs in mkinitcpio.conf'
# ══════════════════════════════════════════════════════════════════════════════
# sed -i '/^HOOKS=/s/fsck/btrfs usr shutdown/' /etc/mkinitcpio.conf
original /etc/mkinitcpio.conf
sed -i '/^HOOKS=/s/fsck/btrfs/' /etc/mkinitcpio.conf
nano /etc/mkinitcpio.conf
mkinitcpio -p linux
checkpoint


heading 'installing bootloader'
# ══════════════════════════════════════════════════════════════════════════════
read -p "Boot disk /dev/sd? [a-z] | /dev/mmcblk? [0]: " disk
if [ -z $disk ] ;then
  echo 'invalid disk reference.. aborting'
  exit
fi
[ $disk = 0 ] && device=/dev/mmcblk${disk} || device=/dev/sd${disk}
efi=$(partition EFI)
if [ $efi ] ;then
  pm_install grub
  pm_install efibootmgr
  pm_install dosfstools
  pm_install os-prober
  pm_install mtools
  grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=grub_uefi --recheck
else
  pm_install grub-bios
  grub-install --target=i386-pc --recheck $device
fi
cp /usr/share/locale/en\@quot/LC_MESSAGES/grub.mo /boot/grub/locale/en.mo
grub-mkconfig -o /boot/grub/grub.cfg
checkpoint


heading 'sync home directory'
# ══════════════════════════════════════════════════════════════════════════════
if [ ! -d /home/$user/stow ] ;then
  pm_install rsync
  mkdir /net
  mount -L Share -t btrfs /net
  [ -d /net/archive/home/$user ] && rsync -av /net/archive/home/$user /home/
  # assume usb image is contains most upto date scripts
  rsync -av /media/home/$user /home/
  rm -f /home/$user/.conky*  # discard other configuration settings
  rm -f /home/$user/.session/*
  touch /home/$user/.session/panel:ticker
  touch /home/$user/.session/panel:weather
  touch /home/$user/.session/setroot
  touch /home/$user/.session/noblur
  chown -R $user:users /home/$user/.session
fi


heading 'cd / and umount /media (usb), exit chroot'
# ══════════════════════════════════════════════════════════════════════════════
# sudo mkdir -pv /net/downloads

# vim: set ft=sh: #
